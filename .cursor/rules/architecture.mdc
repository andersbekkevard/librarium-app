---
alwaysApply: false
---
### Key Architecture Principles

1. **Service Layer Architecture**: Clean separation between presentation, business logic, and data access
2. **Firebase-Native Approach**: Direct Firebase SDK integration with real-time Firestore listeners
3. **TypeScript-First**: Comprehensive type safety throughout the entire codebase
4. **Repository Pattern**: Abstraction layer for all data operations
5. **Component Composition**: Reusable UI components following Notion-inspired minimal design
6. **Centralized Color System**: All colors linked to predefined brand colors in `src/lib/colors.ts`
7. **User-Centric Data Structure**: Firestore collections organized under user documents for security

## Architecture Layers

### üé® Presentation Layer
- **Components**: React components (`.tsx` files in `/components`)
- **Pages**: Next.js page components (`.tsx` files in `/app`)
- **Providers**: React context providers (`.tsx` files in `/lib/providers`)

### üß† Service Layer
- **Services**: Business logic classes (`.ts` files in `/lib/services`)
- **AuthService**: Authentication operations
- **UserService**: User profile and statistics management
- **BookService**: Book operations and reading state management
- **EventService**: Event logging and activity tracking

### üíæ Repository Layer
- **Repositories**: Data access classes (`.ts` files in `/lib/repositories`)
- **FirebaseBookRepository**: Book data operations
- **FirebaseUserRepository**: User profile data operations
- **FirebaseEventRepository**: Event logging operations

### üîå External Layer
- **Firebase**: Firestore, Auth, Storage
- **Google Books API**: Book metadata fetching

## Strict Calling Rules

### ‚úÖ ALLOWED CALLS

1. **Components ‚Üí Providers ONLY**
   ```typescript
   // ‚úÖ Components can ONLY call Provider hooks
   const BookCard = () => {
     const { updateBookProgress } = useBooksContext(); // ‚úÖ ALLOWED
     const { user } = useAuthContext(); // ‚úÖ ALLOWED
   };
   ```

2. **Providers ‚Üí Services ONLY**
   ```typescript
   // ‚úÖ Providers can call Service methods
   export const BooksProvider = () => {
     const updateBookProgress = async (bookId: string, currentPage: number) => {
       const result = await bookService.updateBookProgress(userId, bookId, currentPage); // ‚úÖ ALLOWED
     };
   };
   ```

3. **Services ‚Üí Repositories ONLY**
   ```typescript
   // ‚úÖ Services can call Repository methods
   export class BookService {
     async updateBookProgress(userId: string, bookId: string, currentPage: number) {
       const book = await this.bookRepository.getBook(userId, bookId); // ‚úÖ ALLOWED
       await this.eventRepository.logEvent(userId, eventData); // ‚úÖ ALLOWED
     }
   }
   ```

4. **Repositories ‚Üí External Services ONLY**
   ```typescript
   // ‚úÖ Repositories can call Firebase/external APIs
   export class FirebaseBookRepository {
     async getBook(userId: string, bookId: string) {
       const bookRef = doc(db, `users/${userId}/books/${bookId}`); // ‚úÖ ALLOWED
       const bookDoc = await getDoc(bookRef); // ‚úÖ ALLOWED
     }
   }
   ```

### ‚ùå FORBIDDEN CALLS

1. **Components ‚Üí Services (NEVER)**
2. **Components ‚Üí Repositories (NEVER)**
3. **Components ‚Üí External Services (NEVER)**
4. **Providers ‚Üí Repositories (NEVER)**
5. **Repositories ‚Üí Services (NEVER)**
6. **Repositories ‚Üí Providers (NEVER)**